(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))s(a);new MutationObserver(a=>{for(const i of a)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function e(a){const i={};return a.integrity&&(i.integrity=a.integrity),a.referrerPolicy&&(i.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?i.credentials="include":a.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(a){if(a.ep)return;a.ep=!0;const i=e(a);fetch(a.href,i)}})();class u{constructor(t,e,s={}){this.name=t,this.avatar=e,this.stats={gamesPlayed:s.gamesPlayed||0,winRate:s.winRate||0,highScore:s.highScore||0,cardsPlayed:[],decisionMatrix:new Map},this.learningRate=.1,this.cardCounter=0}calculateProbabilities(t,e,s){const a=t.value,i=e.value,r=this.countCards(s),l=r.filter(h=>a+h>21).length/s.length,d=this.calculateWinProbability(a,i,r);return{bustProbability:l,winProbability:d}}getAdvice(t,e,s){const a=this.calculateProbabilities(t,e,s.remainingCards);if(a.bustProbability>.6)return"Stand";if(a.winProbability>.7)return"Hit";const i=this.getBasicStrategy(t.value,e.value),r=this.applyMLAdjustment(i,a);return this.updateDecisionMatrix(t,e,r),r}updateDecisionMatrix(t,e,s){var r;const a=`${t.value}-${e.value}`,i=((r=this.decisionMatrix.get(a))==null?void 0:r.successRate)||.5;this.decisionMatrix.set(a,{decision:s,successRate:i*(1-this.learningRate)+(this.won?1:0)*this.learningRate})}countCards(t){const e=t.value;return e>=2&&e<=6&&this.cardCounter++,(e>=10||e===1)&&this.cardCounter--,this.cardCounter}}class p{constructor(t,e){this.suit=t,this.rank=e,this.faceUp=!0}get value(){return this.rank==="A"?11:["K","Q","J"].includes(this.rank)?10:parseInt(this.rank)}flip(){this.faceUp=!this.faceUp}}class f{constructor(){this.cards=[],this.reset()}reset(){const t=["♠","♣","♥","♦"],e=["A","2","3","4","5","6","7","8","9","10","J","Q","K"];this.cards=t.flatMap(s=>e.map(a=>new p(s,a))),this.shuffle()}shuffle(){for(let t=this.cards.length-1;t>0;t--){const e=Math.floor(Math.random()*(t+1));[this.cards[t],this.cards[e]]=[this.cards[e],this.cards[t]]}}draw(){return this.cards.pop()}}class c{constructor(){this.cards=[]}addCard(t){this.cards.push(t)}get value(){let t=0,e=0;for(const s of this.cards)s.rank==="A"?(e++,t+=11):t+=s.value;for(;t>21&&e>0;)t-=10,e--;return t}clear(){this.cards=[]}}class g{constructor(t){this.agent=t,this.deck=new f,this.playerHand=new c,this.dealerHand=new c,this.gameState="betting"}startGame(){this.deck.reset(),this.playerHand.clear(),this.dealerHand.clear(),this.playerHand.addCard(this.deck.draw()),this.dealerHand.addCard(this.deck.draw()),this.playerHand.addCard(this.deck.draw());const t=this.deck.draw();t.faceUp=!1,this.dealerHand.addCard(t),this.gameState="playing"}playerHit(){this.gameState==="playing"&&(this.playerHand.addCard(this.deck.draw()),this.playerHand.value>21&&this.endGame())}playerStand(){this.gameState==="playing"&&(this.dealerPlay(),this.endGame())}dealerPlay(){for(this.dealerHand.cards[1].faceUp=!0;this.dealerHand.value<17;)this.dealerHand.addCard(this.deck.draw())}endGame(){this.gameState="finished";const t=this.playerHand.value,e=this.dealerHand.value;let s=!1;return t<=21&&(e>21||t>e)&&(s=!0),this.agent.updateStats(s),s}}class y{constructor(t,e){this.game=t,this.analytics=e,this.animations=new AnimationController,this.tutorial=new m}updateDisplay(){this.renderGameState(),this.updateProbabilities(),this.showPredictiveHints(),this.renderAnalytics()}showPredictiveHints(){const t=this.game.agent.getPredictedMoves();this.renderHints(t)}renderAnalytics(){const t=this.analytics.generateInsights();this.updateAnalyticsDisplay(t)}}class m{constructor(){this.playerMistakes=new Map,this.tutorialSteps=new Map,this.currentFocus=null}analyzeMistake(t,e){const s=this.getOptimalDecision(t);e!==s&&(this.recordMistake(t.pattern),this.triggerTutorial(t.pattern))}recordMistake(t){const e=this.playerMistakes.get(t)||0;this.playerMistakes.set(t,e+1),e+1>=3&&this.prioritizeTutorial(t)}generatePersonalizedTips(){return Array.from(this.playerMistakes.entries()).sort((e,s)=>s[1]-e[1]).slice(0,3).map(([e,s])=>({pattern:e,tip:this.getTipForPattern(e),priority:s}))}}const w=new u("Jack the Dealer","avatar.png",{gamesPlayed:0,winRate:0,highScore:0}),o=new g(w),v=new y(o);o.startGame();v.updateDisplay();
